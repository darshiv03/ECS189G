# -*- coding: utf-8 -*-
"""project5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RRuWEnRsB7X0gFkPQs474R6kE-zT8SGZ
"""

!pip install torch scipy numpy

import os
import glob
import time
import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import scipy.sparse as sp


def encode_onehot(labels):
    classes = set(labels)
    class_map = {c: np.identity(len(classes))[i, :] for i, c in enumerate(classes)}
    labels_onehot = np.array([class_map[label] for label in labels], dtype=np.int32)
    return labels_onehot

def normalize(mx):
    rowsum = np.array(mx.sum(1))
    r_inv = np.power(rowsum, -1).flatten()
    r_inv[np.isinf(r_inv)] = 0.
    return sp.diags(r_inv).dot(mx)


def sparse_mx_to_torch_sparse_tensor(sparse_mx):
    sparse_mx = sparse_mx.tocoo().astype(np.float32)
    indices = torch.from_numpy(np.vstack((sparse_mx.row, sparse_mx.col)).astype(np.int64))
    values = torch.from_numpy(sparse_mx.data)
    shape = torch.Size(sparse_mx.shape)
    return torch.sparse.FloatTensor(indices, values, shape)

def accuracy(output, labels):
    preds = output.max(1)[1].type_as(labels)
    return preds.eq(labels).double().sum() / len(labels)

def detect_files(folder):
    files = sorted(glob.glob(f"{folder}/*"))

    if len(files) != 2:
        raise ValueError(f"Expected 2 files in '{folder}', but found {len(files)}: {files}")

    col_counts = [len(np.genfromtxt(f, max_rows=1, dtype=str)) for f in files]
    node_file = files[col_counts.index(max(col_counts))]
    link_file = files[col_counts.index(min(col_counts))]

    print(f"[{folder}] Detected node file: {os.path.basename(node_file)}, link file: {os.path.basename(link_file)}")
    return node_file, link_file

def load_data(folder):
    content_path, cites_path = detect_files(folder)
    print(f"Detected:\n  Node file: {os.path.basename(content_path)}\n  Link file: {os.path.basename(cites_path)}")

    idx_features_labels = np.genfromtxt(content_path, dtype=np.dtype(str))
    features = sp.csr_matrix(idx_features_labels[:, 1:-1], dtype=np.float32)
    labels = encode_onehot(idx_features_labels[:, -1])

    idx = np.array(idx_features_labels[:, 0], dtype=np.int32)
    idx_map = {j: i for i, j in enumerate(idx)}
    edges_unordered = np.genfromtxt(cites_path, dtype=np.int32)
    edges = np.array([idx_map[e] for e in edges_unordered.flatten() if e in idx_map], dtype=np.int32).reshape(-1, 2)
    adj = sp.coo_matrix((np.ones(edges.shape[0]), (edges[:, 0], edges[:, 1])),
                        shape=(labels.shape[0], labels.shape[0]), dtype=np.float32)
    adj = adj + adj.T.multiply(adj.T > adj) - adj.multiply(adj.T > adj)

    adj = normalize(adj + sp.eye(adj.shape[0]))
    features = normalize(features)

    dataset = folder.split('/')[-1]
    if dataset == 'cora':
        idx_train = range(140)
        idx_val = range(200, 500)
        idx_test = range(500, 1500)
    elif dataset == 'citeseer':
        idx_train = range(120)
        idx_val = range(500, 1000)
        idx_test = range(1000, 2200)
    elif dataset == 'pubmed':
        idx_train = range(60)
        idx_val = range(500, 1000)
        idx_test = range(1000, 1600)

    features = torch.FloatTensor(np.array(features.todense()))
    labels = torch.LongTensor(np.where(labels)[1])
    adj = sparse_mx_to_torch_sparse_tensor(adj)

    return adj, features, labels, torch.LongTensor(list(idx_train)), torch.LongTensor(list(idx_val)), torch.LongTensor(list(idx_test))

import torch.nn as nn
import torch.nn.functional as F

class GraphConvolution(nn.Module):
    def __init__(self, in_features, out_features, bias=True):
        super(GraphConvolution, self).__init__()
        self.weight = nn.Parameter(torch.FloatTensor(in_features, out_features))
        self.bias = nn.Parameter(torch.FloatTensor(out_features)) if bias else None
        self.reset_parameters()

    def reset_parameters(self):
        stdv = 1. / np.sqrt(self.weight.size(1))
        self.weight.data.uniform_(-stdv, stdv)
        if self.bias is not None:
            self.bias.data.uniform_(-stdv, stdv)

    def forward(self, x, adj):
        support = torch.mm(x, self.weight)
        out = torch.spmm(adj, support)
        return out + self.bias if self.bias is not None else out

class GCN(nn.Module):
    def __init__(self, nfeat, nhid, nclass, dropout):
        super(GCN, self).__init__()
        self.gc1 = GraphConvolution(nfeat, nhid)
        self.gc2 = GraphConvolution(nhid, nclass)
        self.dropout = dropout

    def forward(self, x, adj):
        x = F.relu(self.gc1(x, adj))
        x = F.dropout(x, self.dropout, training=self.training)
        return F.log_softmax(self.gc2(x, adj), dim=1)

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

def train_gcn(folder, hidden=16, dropout=0.5, lr=0.01, weight_decay=5e-4, epochs=200):
    device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
    adj, features, labels, idx_train, idx_val, idx_test = load_data(folder)

    features, adj, labels = features.to(device), adj.to(device), labels.to(device)
    idx_train, idx_val, idx_test = idx_train.to(device), idx_val.to(device), idx_test.to(device)

    model = GCN(nfeat=features.shape[1], nhid=hidden, nclass=labels.max().item() + 1, dropout=dropout).to(device)
    optimizer = optim.Adam(model.parameters(), lr=lr, weight_decay=weight_decay)

    loss_list = []

    print(f"\nTraining on: {folder}")
    for epoch in range(epochs):
        model.train()
        optimizer.zero_grad()
        output = model(features, adj)
        loss_train = F.nll_loss(output[idx_train], labels[idx_train])
        acc_train = accuracy(output[idx_train], labels[idx_train])
        loss_train.backward()
        optimizer.step()

        loss_list.append(loss_train.item())  # Track loss

        model.eval()
        output = model(features, adj)
        loss_val = F.nll_loss(output[idx_val], labels[idx_val])
        acc_val = accuracy(output[idx_val], labels[idx_val])

        print(f"Epoch {epoch+1:03d} | Loss: {loss_train.item():.4f} | Acc: {acc_train.item():.4f} | Val Loss: {loss_val.item():.4f} | Val Acc: {acc_val.item():.4f}")

    model.eval()
    output = model(features, adj)
    loss_test = F.nll_loss(output[idx_test], labels[idx_test])
    acc_test = accuracy(output[idx_test], labels[idx_test])
    print(f"\nTest Results for {folder.upper()} â€” Loss: {loss_test.item():.4f} | Accuracy: {acc_test.item():.4f}")
    y_true = labels[idx_test].cpu().numpy()
    y_pred = output[idx_test].argmax(dim=1).cpu().numpy()

    prec = precision_score(y_true, y_pred, average='macro', zero_division=0)
    rec = recall_score(y_true, y_pred, average='macro', zero_division=0)
    f1 = f1_score(y_true, y_pred, average='macro', zero_division=0)

    print(f"Precision: {prec:.4f} | Recall: {rec:.4f} | F1 Score: {f1:.4f}")

    return loss_list

import matplotlib.pyplot as plt

cora_loss = train_gcn('cora')
citeseer_loss = train_gcn(
    folder='citeseer',
    hidden=16,
    dropout=0.5,
    lr=0.01,
    weight_decay=5e-4,
    epochs=200
)

pubmed_loss = train_gcn('pubmed')

plt.figure(figsize=(8, 6))
plt.plot(range(1, 201), cora_loss, label='Cora')
plt.plot(range(1, 201), citeseer_loss, label='Citeseer')
plt.plot(range(1, 201), pubmed_loss, label='Pubmed')
plt.xlabel('Epoch')
plt.ylabel('Training Loss')
plt.title('GCN Training Convergence on Citation Datasets')
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()


#train_gcn('cora')
#train_gcn('citeseer')
#train_gcn('pubmed')

import os

datasets = ['cora', 'citeseer', 'pubmed']

for dataset in datasets:
    node_path = f'{dataset}/node'
    link_path = f'{dataset}/link'

    with open(node_path, 'r') as f:
        node_lines = sum(1 for _ in f)

    with open(link_path, 'r') as f:
        link_lines = sum(1 for _ in f)

    print(f"{dataset.capitalize()} - Nodes: {node_lines}, Links: {link_lines}")